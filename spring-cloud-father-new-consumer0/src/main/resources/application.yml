server:
  port: 3300
  servlet:
    context-path: /consumer #提供相同服务的两个微服务,访问路径要一致

  #开启spring boot gzip压缩
  compression:
    enabled: true  #启用
    mime-types: application/json,application/ xml,text/html,text/xml,text/plain

eureka:
  instance:
    prefer-ip-address: true #使用ip注册
    instance-id: consumer0-0-hystrix  #自定义服务信息,服务熔断
  client:
    service-url: #服务注册地址
      defaultZone: http://xia:123@springcloud.eureka0:3100/eureka/eureka/,http://xia:123@springcloud.eureka1:3101/eureka/eureka/,http://xia:123@springcloud.eureka2:3102/eureka/eureka/

spring:
  application:
    name: springcloud-consumer #会作为eureka组件的服务名,提供相同服务的两个微服务名称要一致
  security:
    user:
      name: xia
      password: 123
  servlet:
    multipart:
      max-file-size: 1MB
      max-request-size: 5MB
  resources:
    static-locations: classpath:/static/ #配置静态资源路径,隔开多个
  profiles:
    active: dev #激活dev模式
  aop:
    proxy-target-class: true #使用cglib代理
  redis:
    host: 127.0.0.1
    port: 6510

#开启feign的压缩功能
feign:
  compression:
    request:
      enabled: true   #配置请求 GZIP 压缩
      mime-types: text/xml,application/xml,application/json #配置压缩支持的 MIME TYPE
      min-request-size: 1024 #配置压缩数据大小的最小阀值，默认 2048
    response:
      enabled: true  #配置响应 GZIP 压缩
  #使用HttpClient替换默认的HttpURLConnection   HttpClient自带连接池
  httpclient:
    enabled: true

#设置负载均衡策略 eureka-provider 为调用的服务的名称
#eureka-provider:
#  ribbon:
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule.RandomRule

# 去掉eureka 直连生产者
#ribbon:
#  eureka:
#    enabled: false
#springcloud-producer:
#  ribbon:
#    listOfServers: http://127.0.0.1:3200/producer

#   户端向服务器请求中带有：Accept-Encoding:gzip, deflate 字段，向服务器表示，
#   客户端支持的压缩格式（gzip 或者 deflate)，如果不发送该消息头，服务器是不会压缩的;
#   服务器返回压缩的格式并且携带 Content-Encoding:gzip 消息头，表示响应报文是根据该格式压缩过的。
#   客户端接收到请求之后，先判断是否有 Content-Encoding 消息头，如果有，按该格式解压报文。否则按正常报文处理
#  这里配置的Gzip压缩是只对Consumer请求Provider时进行的压缩

---
spring:
  profiles: dev #dev模式
logging:
  config: classpath:logback-spring.xml



